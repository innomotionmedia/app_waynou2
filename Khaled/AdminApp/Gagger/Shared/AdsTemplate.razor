@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

<div class="container">
    <table class="main">
        <tr >
            <td style="vertical-align: top;" class="thumbnailContainer">
                <img src="@Helpers.Converters.ReturnBase64ImageSourceFromBase64String(Image)" />
                <img src="@Base64Image" />
            </td>
            <td style="vertical-align: top;" >
                <table>
                    <tr>
                        <td>
                            <strong>
                                @Title
                            </strong>
                        </td>
                    </tr>
                    <tr>
                        <td>
                             <p>@Desc</p>
                        </td>
                    </tr>
                </table>
            </td>
            <td style="vertical-align: top;">
                <button class="delete" @onclick="() => DelteAd(Id)">X</button>
            </td>
        </tr>
    </table>
</div>
<table style="margin-top: -15px;">
    <tr>
        <td>
            <button class="delete" @onclick="() => AlterAd(Id)">bearbeiten</button>
        </td>
        <td>
            <p style="font-size: 12px; margin-top: 30px; margin-left: 20px;">Ad-Id: @Id</p>
        </td>
    </tr>
</table>


<style>
    .container{
        width: 100%;
        background-color:white;
        height: 160px;
        border-radius: 1%;
    }

    .main{
        width: 100%;
        border-collapse: collapse; 
    }

    td {
        width: auto; /* Allow cells to adjust their width based on content */
    }

    .thumbnailContainer {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 140px;
        width: 230px;
        overflow: hidden; 
    }
</style>

@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Desc { get; set; } 
    [Parameter]
    public string Image { get; set; }
    [Parameter]
    public string Id { get; set; } = "Null";
    [Parameter]
    public string Base64Image { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (string.IsNullOrEmpty(Title)) Title = "Null";
        if (string.IsNullOrEmpty(Desc)) Desc = "Null";

        StateHasChanged();
    }

    private async void DelteAd(string id)
    {
        if (Id == "Null") return;

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Sicher löschen? Das ist unumkehrbar!"); // Confirm

        if (confirmed)
        {
            // User clicked OK
            await Data.Api.AdsApi.DeleteAdById(id);
            StateHasChanged();
            Pages.Ads.AllAds.Instance.TheStateHasChanged();
        }
        else
        {
            // User clicked Cancel
        }
    }

    private async void AlterAd(string id)
    {
        if (Id == "Null") return;
        NavManager.NavigateTo("/mainpage?id=" + id);
    }

}
