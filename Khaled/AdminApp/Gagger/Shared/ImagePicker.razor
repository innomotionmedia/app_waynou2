
<InputFile OnChange="@LoadFiles" multiple accept=".jpg,.jpeg,.png"/>
<div >
    @{
        //only one can ever be true
        bool profilePicVisible = false;
        bool memePicVisible = false;

        <div hidden="@memePicVisible" class="container2">
                @foreach (var file in loadedFiles)
                {
                    <div class="image-container">
                        <img alt="" src="@base64data" />
                    </div>
                }
        </div>
    }

</div>


<style>



    .imagecontainer {
        width: 150px;
        height: 150px;
        overflow: hidden;
        border-radius: 50%;
        border: 5px solid black; /* You can customize the width, style, and color */

        position: relative; /* Ensure positioning works properly */
    }

     .imagecontainer img {
         width: 100%;
         height: 100%;
         object-fit: cover; /* Maintain aspect ratio and cover container */
         object-position: center center; /* Center the cropped area */
         position: absolute; /* Position the image within the container */
     }

    .imagecontainer_meme {
        margin-top: 10px;
        width: 100%;
        max-width: 300px;
        max-height: 500px; 
        padding: 10px;
        border: 2px solid #000;
        background-color: black;
        border-radius: 15px;
        -moz-border-radius: 10px;
        overflow: hidden;
    }

    .container2 {
        display: flex;
        justify-content: center;
        padding-top: 20px;
        align-items: baseline;
        width: 100%;
        height: 300px; /* Adjust to your desired container height */
    }

    .image-container {
        max-width: 300px;
        text-align: center;
    }

        .image-container img {
            max-width: 100%;
            height: auto;
            padding: 10px;
            border: 2px solid #000;
            background-color: black;
            border-radius: 15px;
            -moz-border-radius: 10px;
        }
</style>

@code {
    // this could handle mutiple images. but is now set to handle one. but thats we have list element and for each and so on. 
    [Parameter]
    public ImageType ImgType { get; set; }
    private string imageDataUrl;
    public static string ImageResult = "";
    List<ImageFile> filesBase64 = new List<ImageFile>();
    bool isDisabled = false;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private string extensionname = "default";
    private string base64data = ""; //you can set a defaut image
    private string isdisplayimage;
    private List<IBrowserFile> loadedFiles = new();

    //InputFile Chnage event
    //new stuff
    [Parameter]
    public string ImgUrl { get; set; }
    [Parameter]
    public EventCallback<string> OnChange { get; set; }


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                //get the upload file extension.
                extensionname = Path.GetExtension(file.Name);

                var imagefiletypes = new List<string>() {
                    ".png",".jpg",".jpeg"
                };
                if (imagefiletypes.Contains(extensionname))
                {

                    //resize the image and create the thumbnails
                    var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
                    var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
                    using (var stream = resizedFile.OpenReadStream())
                    {
                        await stream.ReadAsync(buf); // copy the stream to the buffer
                    }
                    base64data = "data:image/png;base64," +  Convert.ToBase64String(buf); // convert to a base64 string!!
                    await Task.Delay(100);
                    //then you can send the base64 data to the server side and insert it into database.
                    ImageResult = Convert.ToBase64String(buf);
                    //show the thumbnails image
                    isdisplayimage = "block";
                }
                else
                {
                    isdisplayimage = "none";
                };
            }
            catch (Exception ex)
            {
                // Logger.LogError("File: {Filename} Error: {Error}",
                //     file.Name, ex.Message);
            }

            StateHasChanged();
        }
        isLoading = false;
    }

    public enum ImageType
    {
        AnzeigenBild,
        OfferPic, 
    }

    public class ImageFile
    {
        public string base64data { get; set; }
        public string contentType { get; set; }
        public string fileName { get; set; }
    }
}
